Linted -- TODO

* Port to --host=i686-w64-mingw32
* Handle the error case in the signal handler in spawner.c
I think the best way to handle this is to get rid of the potential for
errors by using sigsetjmp to handle signals instead of the self pipe
trick. One can jump out of a blocking signal call with a signal
handler without any possibility of an error happening.
* Avoid deadlock where process blocks on sending message to shutdown process
* Have a better error handling scheme for processes
I need to be able signal failure from one process to another.
* Think about whether to use -Wa,--noexecstack and -Wl,-z,noexecstack
I think I read somewhere that these force a nonexecutable stack but
that if things are done correctly that the shouldn't be happening
anyways. I believe what I really want is a -Wl,--warn-execstack
option.
* Drag message queue creation outside of task spawning
This will later let us bind these things to message queues names that
the user gives.

This will also allow us create cyclic dependencies and let the gui
message the simulator.
* Make spawner forks check passed in sockets
Because the spawner forks off processes the current protocol isn't so
bad but there should be a little error checking.
* Don't do cargo cult security
This is pretty much impossible.

I'm just a young hacker playing around with technologies like
sandboxing. I have no real knowledge of security. I hope this project
is useful as a personal learning experience though.
* Don't do security theater
Security theater is when people do big and impressive things with
sandboxing but then conveniently forget a back door that lets
attackers in.

See cargo cult security for why this is impossible.
