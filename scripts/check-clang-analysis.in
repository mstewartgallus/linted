#! /usr/bin/env sh
# Copyright (C) 2015 Steven Stewart-Gallus
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.

set -e
set -C
set -u

go() {
"${LINTED_CLANG}"\
    --analyze\
    \
    -w\
    -Qunused-arguments\
    -Wno-unknown-warning-option\
    -Xclang -analyzer-output=text\
    -Xclang -o-\
    \
    $(checkers)\
    \
    $(source_cflags)\
    --\
    $(source_files)
}

source_cflags() {
    "${SCRIPTS}/json-cc-flags.py" "${BINARY}"
}

source_files() {
    "${SCRIPTS}/json-cc-files.py" "${BINARY}"
}

checkers() {
    for II in ${ENABLED}; do
        echo -Xanalyzer -analyzer-checker="${II}"
    done
    for II in ${DISABLED}; do
        echo -Xanalyzer -analyzer-disable-checker="${II}"
    done
}

SCRIPTS="@srcdir@"
BINARY="$1"

: ${LINTED_CLANG:=clang}

DISABLED=$(
    # Sadly we need to use vfork sometimes
    # Warn on uses of the 'vfork' function
    echo 'security.insecureAPI.vfork'

    # Way too many false positives
    # Check for cast from non-struct pointer to struct pointer
    echo 'alpha.core.CastToStruct'
)

ENABLED=$(
    # Warn about assigning non-{0,1} values to Boolean variables
    echo 'alpha.core.BoolAssignment'
    # Check when casting a malloc'ed type T, whether the size is a
    # multiple of the size of T
    echo 'alpha.core.CastSize'

    # Check for assignment of a fixed address to a pointer
    echo 'alpha.core.FixedAddr'
    # Warn about unintended use of identical expressions in operators
    echo 'alpha.core.IdenticalExpr'
    # Check for pointer arithmetic on locations other than array elements
    echo 'alpha.core.PointerArithm'
    # Check for pointer subtractions on two pointers pointing to different
    # memory chunks
    echo 'alpha.core.PointerSub'
    # Warn about unintended use of sizeof() on pointer expressions
    echo 'alpha.core.SizeofPtr'
    # Check for memory leaks. Traces memory managed by new/delete.
    echo 'alpha.cplusplus.NewDeleteLeaks'
    # Check virtual function calls during construction or destruction
    echo 'alpha.cplusplus.VirtualCall'

    # Check unreachable code
    echo 'alpha.deadcode.UnreachableCode'
    # Warn about Objective-C classes that lack a correct implementation of
    # -dealloc
    echo 'alpha.osx.cocoa.Dealloc'
    # Check for direct assignments to instance variables
    echo 'alpha.osx.cocoa.DirectIvarAssignment'
    # Check for direct assignments to instance variables in the methods
    # annotated with objc_no_direct_instance_variable_assignment
    echo 'alpha.osx.cocoa.DirectIvarAssignmentForAnnotatedFunctions'
    # Check that the invalidatable instance variables are invalidated in
    # the methods annotated with objc_instance_variable_invalidator
    echo 'alpha.osx.cocoa.InstanceVariableInvalidation'
    # Check that the invalidation methods are present in classes that
    # contain invalidatable instance variables
    echo 'alpha.osx.cocoa.MissingInvalidationMethod'
    # Warn about buffer overflows (older checker)
    echo 'alpha.security.ArrayBound'
    # Warn about buffer overflows (newer checker)
    echo 'alpha.security.ArrayBoundV2'
    # Check for overflows in the arguments to malloc()
    echo 'alpha.security.MallocOverflow'
    # Check for an out-of-bound pointer being returned to callers
    echo 'alpha.security.ReturnPtrRange'
    # Generate taint information used by other checkers
    echo 'alpha.security.taint.TaintPropagation'
    # Check improper use of chroot
    echo 'alpha.unix.Chroot'
    # Check for memory leaks, double free, and use-after-free
    # problems. Traces memory managed by malloc()/free(). Assumes that all
    # user-defined functions which might free a pointer are annotated.
    echo 'alpha.unix.MallocWithAnnotations'
    # Simple lock -> unlock checker
    echo 'alpha.unix.PthreadLock'
    # Check for misuses of stream APIs
    echo 'alpha.unix.SimpleStream'
    # Check stream handling functions
    echo 'alpha.unix.Stream'
    # Checks for overlap in two buffer arguments
    echo 'alpha.unix.cstring.BufferOverlap'
    # Check for arguments which are not null-terminating strings
    echo 'alpha.unix.cstring.NotNullTerminated'
    # Check for out-of-bounds access in string functions
    echo 'alpha.unix.cstring.OutOfBounds'

    # Check for logical errors for function calls and Objective-C message
    # expressions (e.g., uninitialized arguments, null function pointers)
    echo 'core.CallAndMessage'
    # Check for division by zero
    echo 'core.DivideZero'
    # Generate dynamic type information
    echo 'core.DynamicTypePropagation'
    # Check for null pointers passed as arguments to a function whose
    # arguments are references or marked with the 'nonnull' attribute
    echo 'core.NonNullParamChecker'
    # Check for dereferences of null pointers
    echo 'core.NullDereference'
    # Check that addresses to stack memory do not escape the function
    echo 'core.StackAddressEscape'
    # Check for undefined results of binary operators
    echo 'core.UndefinedBinaryOperatorResult'
    # Check for declarations of VLA of undefined or zero size
    echo 'core.VLASize'
    # Evaluate compiler builtin functions (e.g., alloca())
    echo 'core.builtin.BuiltinFunctions'
    # Evaluate panic functions that are known to not return to the caller
    echo 'core.builtin.NoReturnFunctions'
    # Check for uninitialized values used as array subscripts
    echo 'core.uninitialized.ArraySubscript'
    # Check for assigning uninitialized values
    echo 'core.uninitialized.Assign'
    # Check for uninitialized values used as branch conditions
    echo 'core.uninitialized.Branch'
    # Check for blocks that capture uninitialized values
    echo 'core.uninitialized.CapturedBlockVariable'
    # Check for uninitialized values being returned to the caller
    echo 'core.uninitialized.UndefReturn'

    # Check for double-free and use-after-free problems. Traces memory
    # managed by new/delete.
    echo 'cplusplus.NewDelete'

    # Check for values stored to variables that are never read afterwards
    echo 'deadcode.DeadStores'

    # Check code for LLVM codebase conventions
    echo 'llvm.Conventions'

    # Check for proper uses of various Apple APIs
    echo 'osx.API'
    # Check for proper uses of Secure Keychain APIs
    echo 'osx.SecKeychainAPI'
    # Check for nil pointers used as mutexes for @synchronized
    echo 'osx.cocoa.AtSync'
    # Check for sending 'retain', 'release', or 'autorelease' directly to a Class
    echo 'osx.cocoa.ClassRelease'
    # Warn about Objective-C method signatures with type incompatibilities
    echo 'osx.cocoa.IncompatibleMethodTypes'
    # Improved modeling of loops using Cocoa collection types
    echo 'osx.cocoa.Loops'
    # Warn about Objective-C methods that lack a necessary call to super
    echo 'osx.cocoa.MissingSuperCall'
    # Warn for suboptimal uses of NSAutoreleasePool in Objective-C GC mode
    echo 'osx.cocoa.NSAutoreleasePool'
    # Check usage of NSError** parameters
    echo 'osx.cocoa.NSError'
    # Check for prohibited nil arguments to ObjC method calls
    echo 'osx.cocoa.NilArg'
    # Model the APIs that are guaranteed to return a non-nil value
    echo 'osx.cocoa.NonNilReturnValue'
    # Check for leaks and improper reference count managementModel the
    # APIs that are guaranteed to return a non-nil value
    echo 'osx.cocoa.RetainCount'
    # Check that 'self' is properly initialized inside an initializer method
    echo 'osx.cocoa.SelfInit'
    # Warn about private ivars that are never used
    echo 'osx.cocoa.UnusedIvars'
    # Check for passing non-Objective-C types to variadic collection
    # initialization methods that expect only Objective-C types
    echo 'osx.cocoa.VariadicMethodTypes'
    # Check usage of CFErrorRef* parameters
    echo 'osx.coreFoundation.CFError'
    # Check for proper uses of CFNumberCreate
    echo 'osx.coreFoundation.CFNumber'
    # Check for null arguments to CFRetain/CFRelease/CFMakeCollectable
    echo 'osx.coreFoundation.CFRetainRelease'
    # Checks for index out-of-bounds when using 'CFArray' API
    echo 'osx.coreFoundation.containers.OutOfBounds'
    # Warns if 'CFArray', 'CFDictionary', 'CFSet' are created with
    # non-pointer-size values
    echo 'osx.coreFoundation.containers.PointerSizedValues'

    # Warn on using a floating point value as a loop counter (CERT:
    # FLP30-C, FLP30-CPP)
    echo 'security.FloatLoopCounter'
    # Warn on uses of functions whose return values must be always checked
    echo 'security.insecureAPI.UncheckedReturn'
    # Warn on uses of the 'getpw' function
    echo 'security.insecureAPI.getpw'
    # Warn on uses of the 'gets' function
    echo 'security.insecureAPI.gets'
    # Warn when 'mkstemp' is passed fewer than 6 X's in the format string
    echo 'security.insecureAPI.mkstemp'
    # Warn on uses of the 'mktemp' function
    echo 'security.insecureAPI.mktemp'
    # Warn on uses of the 'rand', 'random', and related functions
    echo 'security.insecureAPI.rand'
    # Warn on uses of the 'strcpy' and 'strcat' functions
    echo 'security.insecureAPI.strcpy'


    # Check calls to various UNIX/Posix functions
    echo 'unix.API'
    # Check for memory leaks, double free, and use-after-free
    # problems. Traces memory managed by malloc()/free().
    echo 'unix.Malloc'
    # Check for dubious malloc arguments involving sizeof
    echo 'unix.MallocSizeof'
    # Check for mismatched deallocators.
    echo 'unix.MismatchedDeallocator'
    # Check the size argument passed into C string functions for common
    # erroneous patterns
    echo 'unix.cstring.BadSizeArg'
    # Check for null pointers being passed as arguments to C string functions
    echo 'unix.cstring.NullArg'
)

go
