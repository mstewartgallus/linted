#! /usr/bin/env sh
# Copyright (C) 2015 Steven Stewart-Gallus
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.
go() {
	# This is a description of a specific build product and not general
	# compilation.  Most people should not use this file.
	set -e
	set -C
	set -u

	export POSIXLY_CORRECT=1
	export LC_ALL='C.UTF-8'

	BASENAME="$(basename -- "$0")"

	while getopts 'h' OPT
	do
		case "${OPT}" in
		h)
			help
			return
			;;

		\?)
			printf -- 'Invalid option: -%s\n' "${OPTARG}"  >&2
			help >&2
			return 1
			;;
		esac
	done
	shift "$(expr "${OPTIND}" - 1)"
	if test "$#" -lt 1
	then
		help >&2
		return 1
	fi
	COMMAND="$1"
	shift

	case "${COMMAND}" in
	'fetch-source')
		source "$@"
		;;

	'fetch-dependencies')
		deps "$@"
		;;

	'configure')
		configure "$@"
		;;

	'build')
		build "$@"
		;;

	*)
		help >&2
		return 1
		;;
	esac
}

help()
{
	printf -- '%s TASK\n' "${BASENAME}"
}

source_help()
{

	printf -- '%s fetch-source SRCDIR\n' "${BASENAME}"
}

source()
{
	while getopts 'h' OPT
	do
		case "${OPT}" in
		h)
			source_help
			return
			;;

		\?)
			printf -- 'Invalid option: -%s\n' "${OPTARG}"  >&2
			source_help >&2
			return 1
			;;
		esac
	done
	shift "$(expr "${OPTIND}" - 1)"
	if test "$#" -ne 1
	then
		source_help >&2
		return 1
	fi
	SRCDIR="$1"
	shift

	mkdir -p "${SRCDIR}/linted"
	git clone --quiet --depth 1 --branch master -- 'git@gitlab.com:linted/linted.git' "${SRCDIR}/linted"
	autoreconf -ivf -Wall "${SRCDIR}/linted"
}

configure_help()
{

	printf -- '%s configure CONFIG SRCDIR DEPDIR BUILDDIR\n' "${BASENAME}"
}

configure()
{
	while getopts 'h' OPT
	do
		case "${OPT}" in
		h)
			configure_help
			return
			;;

		\?)
			printf -- 'Invalid option: -%s\n' "${OPTARG}"  >&2
			configure_help >&2
			return 1
			;;
		esac
	done
	shift "$(expr "${OPTIND}" - 1)"
	if test "$#" -ne 4
	then
		configure_help >&2
		return 1
	fi
	CONFIG="$1"
	SRCDIR="$2"
	DEPDIR="$3"
	BUILDDIR="$4"
	shift 4

	case "${CONFIG}" in
	'x86_64-w64-mingw32')
		CC='x86_64-w64-mingw32-gcc-4.8'
		HOST='x86_64-w64-mingw32'
		;;

	*)
		printf -- 'Invalid config: -%s\n' "${CONFIG}"  >&2
		configure_help >&2
		return 1
		;;
	esac

	mkdir -p "${BUILDDIR}/linted"
	CONFIGURE="$(realpath "${SRCDIR}/linted/configure-defaults")"

	DEPDIR="$(realpath "${DEPDIR}")"
	(cd "${BUILDDIR}/linted" && "${CONFIGURE}" --with-sysroot="${DEPDIR}" CC="${CC}" --prefix='/opt/linted' --host="${HOST}")
}

build_help()
{

	printf -- '%s build BUILDDIR\n' "${BASENAME}"
}

build()
{
	while getopts 'h' OPT
	do
		case "${OPT}" in
		h)
			build_help
			return
			;;

		\?)
			printf -- 'Invalid option: -%s\n' "${OPTARG}"  >&2
			build_help >&2
			return 1
			;;
		esac
	done
	shift "$(expr "${OPTIND}" - 1)"
	if test "$#" -ne 2
	then
		build_help >&2
		return 1
	fi
	SRCDIR="$1"
	BUILDDIR="$2"
	shift

	make --silent -C "${BUILDDIR}/linted"
	make --silent install -C "${BUILDDIR}/linted" DESTDIR="$(realpath "${BUILDDIR}/tarball")"
	cp "${SRCDIR}/linted/README" "${BUILDDIR}/tarball"
	(
		cd "${BUILDDIR}"
		find tarball -print0 | LC_ALL=C sort -z | tar --null -T - --no-recursion --mtime=0 --numeric-owner --group=root --owner=root -c -f 'tarball.tar'
	)
	gzip -n -9 -f -- "${BUILDDIR}/tarball.tar"
}

deps_help()
{

	printf -- '%s fetch-dependencies DEPDIR\n' "${BASENAME}"
}

deps()
{
	while getopts 'h' OPT
	do
		case "${OPT}" in
		h)
			deps_help
			return
			;;

		\?)
			printf -- 'Invalid option: -%s\n' "${OPTARG}"  >&2
			deps_help >&2
			return 1
			;;
		esac
	done
	shift "$(expr "${OPTIND}" - 1)"
	if test "$#" -ne 2
	then
		deps_help >&2
		return 1
	fi
	CONFIG="$1"
	DEPDIR="$2"
	shift 2

	mkdir -p "${DEPDIR}/var/cache/builddeps"
	printdeps "${CONFIG}" | (cd "${DEPDIR}/var/cache/builddeps" && xargs -0 -- apt-get download --quiet) || :

	find "${DEPDIR}/var/cache/builddeps" -name '*.deb' -type f | {
		while read II
		do
			dpkg-deb -x "$II" "${DEPDIR}"
		done
	}
}

printdeps() {
	case "${CONFIG}" in
	'x86_64-w64-mingw32')
		ARCH='amd64'
		OS='w64'
		ABI='mingw32'
		;;

	*)
		return 1
		;;
	esac

	# This is an ugly hack to get autoconf working
	printf '%s\0' 'libc6'
	printf '%s\0' 'libc6-dev'

	printf '%s\0' 'x11proto-core-dev'
	printf '%s\0' "x11proto-damage-dev"
	printf '%s\0' "x11proto-fixes-dev"
	printf '%s\0' "x11proto-kb-dev"
	printf '%s\0' "x11proto-xext-dev"
	printf '%s\0' "x11proto-xf86vidmode-dev"

	case "${ABI}" in
	'dietlibc')
		printf '%s\0' 'dietlibc-dev'
		;;

	*)
		;;
	esac

	case "${ARCH}-${OS}-${ABI}" in
	'aarch64-linux-gnu' | \
		'arm-linux-androideabi' | \
		'arm-linux-gnueabi' | \
		'arm-linux-gnueabihf' | \
		'i686-linux-android' | \
		'powerpc64le-linux-gnu' | \
		'powerpc-linux-gnu')
		printf '%s\0' "gcc-${ARCH}-${OS}-${ABI}"
		;;

	*)
		;;
	esac

	case "${ARCH}-${OS}-${ABI}" in
	'arm-linux-gnueabihf')
		printf '%s\0' 'libc6-dev-armhf-cross'
		;;

	'powerpc-linux-gnu')
		printf '%s\0' 'libc6-dev-powerpc-cross'
		;;

	'aarch64-linux-gnu')
		printf '%s\0' 'libc6-dev-arm64-cross'
		;;

	'arm-linux-gnueabi')
		printf '%s\0' 'libc6-dev-armel-cross'
		;;

	'powerpc64le-linux-gnu')
		printf '%s\0' 'libc6-dev-ppc64el-cross'
		;;

	'amd64-w64-mingw')
		printf '%s\0' 'mingw-w64-x86-64-dev'
		;;
	'i686-w64-mingw')
		printf '%s\0' 'mingw-w64-i686-dev'
		;;

	'i686-linux-musl' | 'amd64-linux-musl')
		printf '%s\0' "musl-dev:${ARCH}"
		;;

	*)
		;;
	esac

	case "${ARCH}" in
		'i386' | 'amd64')

		case "${OS}" in
		'linux')
			printf '%s\0' "linux-libc-dev:${ARCH}"
			;;
		*)
			;;
		esac

		case "${ARCH}-${OS}-${ABI}" in
		'i386-linux-gnu' | 'amd64-linux-gnu')
			printf '%s\0' "libc6:${ARCH}"
			printf '%s\0' "libc6-dev:${ARCH}"
			printf '%s\0' "libcap-dev:${ARCH}"
			printf '%s\0' "libegl1-mesa:${ARCH}"
			printf '%s\0' "libegl1-mesa-dev:${ARCH}"
			printf '%s\0' "libgl1-mesa-glx:${ARCH}"
			printf '%s\0' "libgles2-mesa:${ARCH}"
			printf '%s\0' "libgles2-mesa-dev:${ARCH}"
			printf '%s\0' "libglib2.0-0:${ARCH}"
			printf '%s\0' "libpulse0:${ARCH}"
			printf '%s\0' "libpulse-dev:${ARCH}"
			printf '%s\0' "libseccomp2:${ARCH}"
			printf '%s\0' "libseccomp-dev:${ARCH}"
			printf '%s\0' "libxcb1:${ARCH}"
			printf '%s\0' "libxcb1-dev:${ARCH}"
			printf '%s\0' "libxcb-xkb1:${ARCH}"
			printf '%s\0' "libxcb-xkb-dev:${ARCH}"
			printf '%s\0' "libxdmcp-dev:${ARCH}"
			printf '%s\0' "libxkbcommon0:${ARCH}"
			printf '%s\0' "libxkbcommon-dev:${ARCH}"
			printf '%s\0' "libxkbcommon-x11-0:${ARCH}"
			printf '%s\0' "libxkbcommon-x11-dev:${ARCH}"

			printf '%s\0' "libasyncns0:${ARCH}"
			printf '%s\0' "libcap2:${ARCH}"
			printf '%s\0' "libdbus-1-3:${ARCH}"
			printf '%s\0' "libdrm2:${ARCH}"
			printf '%s\0' "libdrm-dev:${ARCH}"
			printf '%s\0' "libffi6:${ARCH}"
			printf '%s\0' "libflac8:${ARCH}"
			printf '%s\0' "libgbm1:${ARCH}"
			printf '%s\0' "libglapi-mesa:${ARCH}"
			printf '%s\0' "libjson-c2:${ARCH}"
			printf '%s\0' "libogg0:${ARCH}"
			printf '%s\0' "libpthread-stubs0-dev:${ARCH}"
			printf '%s\0' "libsndfile1:${ARCH}"
			printf '%s\0' "libvorbis0a:${ARCH}"
			printf '%s\0' "libvorbisenc2:${ARCH}"
			printf '%s\0' "libwayland-client0:${ARCH}"
			printf '%s\0' "libwayland-server0:${ARCH}"
			printf '%s\0' "libwrap0:${ARCH}"
			printf '%s\0' "libx11-6:${ARCH}"
			printf '%s\0' "libx11-dev:${ARCH}"
			printf '%s\0' "libx11-xcb1:${ARCH}"
			printf '%s\0' "libx11-xcb-dev:${ARCH}"
			printf '%s\0' "libxau6:${ARCH}"
			printf '%s\0' "libxau-dev:${ARCH}"
			printf '%s\0' "libxcb-dri2-0:${ARCH}"
			printf '%s\0' "libxcb-dri2-0-dev:${ARCH}"
			printf '%s\0' "libxcb-dri3-dev:${ARCH}"
			printf '%s\0' "libxcb-glx0-dev:${ARCH}"
			printf '%s\0' "libxcb-present-dev:${ARCH}"
			printf '%s\0' "libxcb-sync-dev:${ARCH}"
			printf '%s\0' "libxcb-xfixes0:${ARCH}"
			printf '%s\0' "libxcb-xfixes0-dev:${ARCH}"
			printf '%s\0' "libxdamage-dev:${ARCH}"
			printf '%s\0' "libxdmcp6:${ARCH}"
			printf '%s\0' "libxext-dev:${ARCH}"
			printf '%s\0' "libxfixes-dev:${ARCH}"
			printf '%s\0' "libxkbcommon-x11-dev:${ARCH}"
			printf '%s\0' "libxshmfence-dev:${ARCH}"
			printf '%s\0' "libxxf86vm-dev:${ARCH}"
			;;

		*)
			;;
		esac
		;;

	*)
		;;
	esac
}

realpath()
{
	printf -- '%s/%s' "$(cd "$(dirname "$1")" && pwd)" "$(basename "$1")"
}

go "$@"
